Nginx for the win!

Part 1 - HTTP Server
1.
  a. The Nginx webserver is running on the defult HTTP port 80. 
  b. Nginx serves content from the /var/www/html/ directory by default.
  c. Primary configuration file for nginx is nginx.conf. 
2. 
  a. Two ways that I ensured that my nginx server was hosting my website was to put my aws's public IP, http://34.230.132.92/, into my
    browser of choice. Once the address of my aws instance loaded, it presented me with my website's content. Another way that I ensured that 
    it was serving the correct web content was to set my sites Server Block Files to defualt_server and remove the defult_server tag from the 
    default hosts server block. I can double check this work with the command "grep -R default_server /etc/nginx/sites-enabled/. This command shows 
    that my storagesystems.com site is the default_server for listening on port 80. 
3. 
  a. For the appropriate access I ran the command "sudo chmod -R 755 /var/www/". This recursively changes the permissions for all of the sit files in the /var/www/ directory. 
  b. For the group creation I did "sudo addgroup devs" and to change the group ownership of the site files I added devs as the group owner. I did this with "sudo chgrp -R devs
  /var/www/". This command allows the group ownership to persist for new content created within the site folder. 
  c. Screen shots of permission sets are in the "Images" folder. 
  
  Part 2 - Enabling HTTPS 
     1. Configuation files changes
       a. Used "sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096" to create a strong Diffie-Hellman (DH) group.
       b. Created a configuration snippet which points to the certificate and key with "sudo nano /etc/nginx/snippets/self-signed.conf" to create a file and placed the pointers of 
       "ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt; ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;" inside the file. 
       c. Created a configuration snippet with strong encryption settings and placed the configuration in a new file with this line "sudo nano /etc/nginx/snippets/ssl-params.conf" .
       d. Modified the "/var/nginx/sites-available/storagesystems.com/" configuration to listen to port 443 for https and also listen to port 80 and redirect it.
     2. Location of Certificate files
       a. Used the location "/etc/ssl/private/nginx-selfsigned.key" for the key and "/etc/ssl/certs/nginx-selfsigned.crt" for the certificate.    
     3. Administrative Commands Used
       a. Allowed HTTPS traffic by using the commands "sudo ufw allow 'Nginx Full'" and "sudo ufw delete allow 'Nginx HTTP'". 
       b. Checking for syntax errors with "sudo nginx -t". 
       c. Restarting Nginx to take the new changes with "sudo systemctl restart nginx". 
     4. HTTPS Confirmation 
       a. I can confirm the HTTPS is enabled by going to my website with https://storagesystems.com and seeing the Google Chrome freaks out because it can not validate the certificate 
        used as it is a self-signed cert. 
       b. Screenshots of HTTPS working will be in the Images folder. 
    
  Part 3 - Firewall Fixes Easy Mode
      1. For the firewall fixes, I set three SSH rules and rules for both HTTP and HTTPS. For the first SSH rule, I set SSH connections to the campus ip range of 138.108.0.0/16 which allows SSH 
       connections from the campus's available IP's. Next I set a SSH rule for the IP range 98.96.0.0/14 which is the range of possible IP's for the StarLink network that I am connected too. I made 
       sure to make it the full range of StarLinks system in case my public IP gets changed. I also created an SSH rule for just my specific home IP, as of now, just to ensure that I would still be able 
       to connect in with SSH. Then I created rules to allow HTTPS and HTTP to any source with is 0.0.0.0/0. 
    
  Part 3 - Firewall Fixes Hard Mode - iptables
    1. Similarly to the 'Firewall Fixes Easy Mode', I created SSH rules for campus, StarLinks range of IPs, and my specific home IP. I did this with the following commands. 
      a. sudo iptables -A INPUT -p tcp -s 130.108.0.0/16 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
      b. sudo iptables -A INPUT -p tcp -s 98.96.0.0/14 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
      c. sudo iptables -A INPUT -p tcp -s 98.97.9.174/32 --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
      d. sudo iptables -A OUTPUT -p tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT
    2. I also allowed outgoing SSH with the following commands. 
      a. sudo iptables -A OUTPUT -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
      b. sudo iptables -A INPUT -p tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT
    3. For the iptables HTTP and HTTPS rules I did it with the same ip ranges as the 'Easy Mode' but used the following commands. These two commands allow all incoming HTTP and HTTPS traffic. 
      a. sudo iptables -A INPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
      b. sudo iptables -A OUTPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate ESTABLISHED -j ACCEPT
      
 Part 4 - Research
   1. Domain name registration
      a. Based on some research I would choose Google Domains to register a domain name. 
      b. To associate a domain name with my web server all I would need to do is access my account for my selected domain name registrar and modify the settings within my newly purchased domain name.
      Its been awhile since I've done this but it is as simple as accessing the settings to your domain name and telling it what your server's public IP address is. 
   2. Certificate Authority Validation
      a. After looking around, I would pick Entrust Datacard to be my CA to validate my site and generate a certificate. 
      b. To validate my site I would need organizational details, web server information, web server address for cert, and of course pay for the certificate authority. 
    
Part 5 - Resources Used
    Below is a list of sources that I used for this project. Also all of my screenshots can be found in the Images folder. 
    1. https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04 
    2. https://www.digitalocean.com/community/tutorials/iptables-essentials-common-firewall-rules-and-commands 
    3. https://iximiuz.com/en/posts/laymans-iptables-101/ 
    4. https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-22-04
    5. https://ubuntu.com/tutorials/install-and-configure-nginx#3-creating-our-own-website
    6. https://medium.com/@madhan5000/first-off-check-if-nginx-is-running-e29759bdb2c
    7. https://www.nginx.com/blog/setting-up-nginx/
    8. https://linuxize.com/post/how-to-list-users-in-linux/ 
    9. https://docs.oracle.com/cd/E19683-01/816-4883/6mb2joat0/index.html
    10. https://devconnected.com/how-to-chown-recursive-on-linux/
    11. https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules
    12. https://www.freecodecamp.org/news/subnet-cheat-sheet-24-subnet-mask-30-26-27-29-and-other-ip-address-cidr-network-references/
    13. https://domains.google/?gclid=CjwKCAiA85efBhBbEiwAD7oLQFJPqCAnt4JB3t7-IzXLaKzMmHnoyqBJnd62S6xxLRhpXoa5IMb3HxoCKIYQAvD_BwE&gclsrc=aw.ds 
    14. https://www.entrust.com/
    
